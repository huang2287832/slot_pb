%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 3.27.2
-module(slot_pb).

-export([encode_msg/1, encode_msg/2]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3]).
-export([verify_msg/1, verify_msg/2]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("slot_pb.hrl").
-include("gpb.hrl").

%% enumerated types

-export_type([]).

%% message types
-type errResp() :: #errResp{}.
-type kickUserPush() :: #kickUserPush{}.
-type balancePush() :: #balancePush{}.
-type gmResp() :: #gmResp{}.
-type loginResp() :: #loginResp{}.
-type beatHeartResp() :: #beatHeartResp{}.
-type gmReq() :: #gmReq{}.
-type beatHeartReq() :: #beatHeartReq{}.
-type getBalanceReq() :: #getBalanceReq{}.
-type getBalanceResp() :: #getBalanceResp{}.
-type loginReq() :: #loginReq{}.
-export_type(['errResp'/0, 'kickUserPush'/0, 'balancePush'/0, 'gmResp'/0, 'loginResp'/0, 'beatHeartResp'/0, 'gmReq'/0, 'beatHeartReq'/0, 'getBalanceReq'/0, 'getBalanceResp'/0, 'loginReq'/0]).


-spec encode_msg(_) -> binary().
encode_msg(Msg) -> encode_msg(Msg, []).


-spec encode_msg(_, list()) -> binary().
encode_msg(Msg, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #errResp{} -> e_msg_errResp(Msg, TrUserData);
      #kickUserPush{} -> e_msg_kickUserPush(Msg, TrUserData);
      #balancePush{} -> e_msg_balancePush(Msg, TrUserData);
      #gmResp{} -> e_msg_gmResp(Msg, TrUserData);
      #loginResp{} -> e_msg_loginResp(Msg, TrUserData);
      #beatHeartResp{} ->
	  e_msg_beatHeartResp(Msg, TrUserData);
      #gmReq{} -> e_msg_gmReq(Msg, TrUserData);
      #beatHeartReq{} -> e_msg_beatHeartReq(Msg, TrUserData);
      #getBalanceReq{} ->
	  e_msg_getBalanceReq(Msg, TrUserData);
      #getBalanceResp{} ->
	  e_msg_getBalanceResp(Msg, TrUserData);
      #loginReq{} -> e_msg_loginReq(Msg, TrUserData)
    end.



e_msg_errResp(Msg, TrUserData) ->
    e_msg_errResp(Msg, <<>>, TrUserData).


e_msg_errResp(#errResp{cmd = F1, err_code = F2,
		       err_msg = F3},
	      Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_varint(TrF1, <<Bin/binary, 8>>)
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  e_varint(TrF2, <<B1/binary, 16>>)
		end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     e_type_string(TrF3, <<B2/binary, 26>>)
	   end
    end.

e_msg_kickUserPush(Msg, TrUserData) ->
    e_msg_kickUserPush(Msg, <<>>, TrUserData).


e_msg_kickUserPush(#kickUserPush{code = F1}, Bin,
		   TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_varint(TrF1, <<Bin/binary, 8>>)
    end.

e_msg_balancePush(Msg, TrUserData) ->
    e_msg_balancePush(Msg, <<>>, TrUserData).


e_msg_balancePush(#balancePush{balance = F1}, Bin,
		  TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_varint(TrF1, <<Bin/binary, 8>>)
    end.

e_msg_gmResp(_Msg, _TrUserData) -> <<>>.

e_msg_loginResp(Msg, TrUserData) ->
    e_msg_loginResp(Msg, <<>>, TrUserData).


e_msg_loginResp(#loginResp{game_id = F1, balance = F2,
			   type = F3, gm = F4},
		Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_varint(TrF1, <<Bin/binary, 8>>)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_varint(TrF2, <<B1/binary, 16>>)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_varint(TrF3, <<B2/binary, 24>>)
	 end,
    begin
      TrF4 = id(F4, TrUserData),
      e_varint(TrF4, <<B3/binary, 32>>)
    end.

e_msg_beatHeartResp(_Msg, _TrUserData) -> <<>>.

e_msg_gmReq(Msg, TrUserData) ->
    e_msg_gmReq(Msg, <<>>, TrUserData).


e_msg_gmReq(#gmReq{gm_str = F1}, Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_string(TrF1, <<Bin/binary, 10>>)
    end.

e_msg_beatHeartReq(_Msg, _TrUserData) -> <<>>.

e_msg_getBalanceReq(_Msg, _TrUserData) -> <<>>.

e_msg_getBalanceResp(Msg, TrUserData) ->
    e_msg_getBalanceResp(Msg, <<>>, TrUserData).


e_msg_getBalanceResp(#getBalanceResp{balance = F1}, Bin,
		     TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_varint(TrF1, <<Bin/binary, 8>>)
    end.

e_msg_loginReq(Msg, TrUserData) ->
    e_msg_loginReq(Msg, <<>>, TrUserData).


e_msg_loginReq(#loginReq{token = F1, game_id = F2}, Bin,
	       TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>)
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     e_varint(TrF2, <<B1/binary, 16>>)
	   end
    end.



e_type_string(S, Bin) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).



decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      errResp -> d_msg_errResp(Bin, TrUserData);
      kickUserPush -> d_msg_kickUserPush(Bin, TrUserData);
      balancePush -> d_msg_balancePush(Bin, TrUserData);
      gmResp -> d_msg_gmResp(Bin, TrUserData);
      loginResp -> d_msg_loginResp(Bin, TrUserData);
      beatHeartResp -> d_msg_beatHeartResp(Bin, TrUserData);
      gmReq -> d_msg_gmReq(Bin, TrUserData);
      beatHeartReq -> d_msg_beatHeartReq(Bin, TrUserData);
      getBalanceReq -> d_msg_getBalanceReq(Bin, TrUserData);
      getBalanceResp -> d_msg_getBalanceResp(Bin, TrUserData);
      loginReq -> d_msg_loginReq(Bin, TrUserData)
    end.



d_msg_errResp(Bin, TrUserData) ->
    dfp_read_field_def_errResp(Bin, 0, 0,
			       id(undefined, TrUserData),
			       id(undefined, TrUserData),
			       id(undefined, TrUserData), TrUserData).

dfp_read_field_def_errResp(<<8, Rest/binary>>, Z1, Z2,
			   F1, F2, F3, TrUserData) ->
    d_field_errResp_cmd(Rest, Z1, Z2, F1, F2, F3,
			TrUserData);
dfp_read_field_def_errResp(<<16, Rest/binary>>, Z1, Z2,
			   F1, F2, F3, TrUserData) ->
    d_field_errResp_err_code(Rest, Z1, Z2, F1, F2, F3,
			     TrUserData);
dfp_read_field_def_errResp(<<26, Rest/binary>>, Z1, Z2,
			   F1, F2, F3, TrUserData) ->
    d_field_errResp_err_msg(Rest, Z1, Z2, F1, F2, F3,
			    TrUserData);
dfp_read_field_def_errResp(<<>>, 0, 0, F1, F2, F3, _) ->
    #errResp{cmd = F1, err_code = F2, err_msg = F3};
dfp_read_field_def_errResp(Other, Z1, Z2, F1, F2, F3,
			   TrUserData) ->
    dg_read_field_def_errResp(Other, Z1, Z2, F1, F2, F3,
			      TrUserData).

dg_read_field_def_errResp(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_errResp(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, TrUserData);
dg_read_field_def_errResp(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_errResp_cmd(Rest, 0, 0, F1, F2, F3, TrUserData);
      16 ->
	  d_field_errResp_err_code(Rest, 0, 0, F1, F2, F3,
				   TrUserData);
      26 ->
	  d_field_errResp_err_msg(Rest, 0, 0, F1, F2, F3,
				  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_errResp(Rest, 0, 0, F1, F2, F3, TrUserData);
	    1 ->
		skip_64_errResp(Rest, 0, 0, F1, F2, F3, TrUserData);
	    2 ->
		skip_length_delimited_errResp(Rest, 0, 0, F1, F2, F3,
					      TrUserData);
	    3 ->
		skip_group_errResp(Rest, Key bsr 3, 0, F1, F2, F3,
				   TrUserData);
	    5 -> skip_32_errResp(Rest, 0, 0, F1, F2, F3, TrUserData)
	  end
    end;
dg_read_field_def_errResp(<<>>, 0, 0, F1, F2, F3, _) ->
    #errResp{cmd = F1, err_code = F2, err_msg = F3}.

d_field_errResp_cmd(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_errResp_cmd(Rest, N + 7, X bsl N + Acc, F1, F2,
			F3, TrUserData);
d_field_errResp_cmd(<<0:1, X:7, Rest/binary>>, N, Acc,
		    _, F2, F3, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_errResp(Rest, 0, 0, NewFValue, F2,
			       F3, TrUserData).


d_field_errResp_err_code(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_errResp_err_code(Rest, N + 7, X bsl N + Acc, F1,
			     F2, F3, TrUserData);
d_field_errResp_err_code(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F1, _, F3, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_errResp(Rest, 0, 0, F1, NewFValue,
			       F3, TrUserData).


d_field_errResp_err_msg(<<1:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_errResp_err_msg(Rest, N + 7, X bsl N + Acc, F1,
			    F2, F3, TrUserData);
d_field_errResp_err_msg(<<0:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_errResp(Rest2, 0, 0, F1, F2,
			       NewFValue, TrUserData).


skip_varint_errResp(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    F1, F2, F3, TrUserData) ->
    skip_varint_errResp(Rest, Z1, Z2, F1, F2, F3,
			TrUserData);
skip_varint_errResp(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    F1, F2, F3, TrUserData) ->
    dfp_read_field_def_errResp(Rest, Z1, Z2, F1, F2, F3,
			       TrUserData).


skip_length_delimited_errResp(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    skip_length_delimited_errResp(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, TrUserData);
skip_length_delimited_errResp(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_errResp(Rest2, 0, 0, F1, F2, F3,
			       TrUserData).


skip_group_errResp(Bin, FNum, Z2, F1, F2, F3,
		   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_errResp(Rest, 0, Z2, F1, F2, F3,
			       TrUserData).


skip_32_errResp(<<_:32, Rest/binary>>, Z1, Z2, F1, F2,
		F3, TrUserData) ->
    dfp_read_field_def_errResp(Rest, Z1, Z2, F1, F2, F3,
			       TrUserData).


skip_64_errResp(<<_:64, Rest/binary>>, Z1, Z2, F1, F2,
		F3, TrUserData) ->
    dfp_read_field_def_errResp(Rest, Z1, Z2, F1, F2, F3,
			       TrUserData).


d_msg_kickUserPush(Bin, TrUserData) ->
    dfp_read_field_def_kickUserPush(Bin, 0, 0,
				    id(undefined, TrUserData), TrUserData).

dfp_read_field_def_kickUserPush(<<8, Rest/binary>>, Z1,
				Z2, F1, TrUserData) ->
    d_field_kickUserPush_code(Rest, Z1, Z2, F1, TrUserData);
dfp_read_field_def_kickUserPush(<<>>, 0, 0, F1, _) ->
    #kickUserPush{code = F1};
dfp_read_field_def_kickUserPush(Other, Z1, Z2, F1,
				TrUserData) ->
    dg_read_field_def_kickUserPush(Other, Z1, Z2, F1,
				   TrUserData).

dg_read_field_def_kickUserPush(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_kickUserPush(Rest, N + 7,
				   X bsl N + Acc, F1, TrUserData);
dg_read_field_def_kickUserPush(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_kickUserPush_code(Rest, 0, 0, F1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_kickUserPush(Rest, 0, 0, F1, TrUserData);
	    1 -> skip_64_kickUserPush(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_kickUserPush(Rest, 0, 0, F1,
						   TrUserData);
	    3 ->
		skip_group_kickUserPush(Rest, Key bsr 3, 0, F1,
					TrUserData);
	    5 -> skip_32_kickUserPush(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_kickUserPush(<<>>, 0, 0, F1, _) ->
    #kickUserPush{code = F1}.

d_field_kickUserPush_code(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, TrUserData)
    when N < 57 ->
    d_field_kickUserPush_code(Rest, N + 7, X bsl N + Acc,
			      F1, TrUserData);
d_field_kickUserPush_code(<<0:1, X:7, Rest/binary>>, N,
			  Acc, _, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_kickUserPush(Rest, 0, 0, NewFValue,
				    TrUserData).


skip_varint_kickUserPush(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F1, TrUserData) ->
    skip_varint_kickUserPush(Rest, Z1, Z2, F1, TrUserData);
skip_varint_kickUserPush(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F1, TrUserData) ->
    dfp_read_field_def_kickUserPush(Rest, Z1, Z2, F1,
				    TrUserData).


skip_length_delimited_kickUserPush(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_kickUserPush(Rest, N + 7,
				       X bsl N + Acc, F1, TrUserData);
skip_length_delimited_kickUserPush(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_kickUserPush(Rest2, 0, 0, F1,
				    TrUserData).


skip_group_kickUserPush(Bin, FNum, Z2, F1,
			TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_kickUserPush(Rest, 0, Z2, F1,
				    TrUserData).


skip_32_kickUserPush(<<_:32, Rest/binary>>, Z1, Z2, F1,
		     TrUserData) ->
    dfp_read_field_def_kickUserPush(Rest, Z1, Z2, F1,
				    TrUserData).


skip_64_kickUserPush(<<_:64, Rest/binary>>, Z1, Z2, F1,
		     TrUserData) ->
    dfp_read_field_def_kickUserPush(Rest, Z1, Z2, F1,
				    TrUserData).


d_msg_balancePush(Bin, TrUserData) ->
    dfp_read_field_def_balancePush(Bin, 0, 0,
				   id(undefined, TrUserData), TrUserData).

dfp_read_field_def_balancePush(<<8, Rest/binary>>, Z1,
			       Z2, F1, TrUserData) ->
    d_field_balancePush_balance(Rest, Z1, Z2, F1,
				TrUserData);
dfp_read_field_def_balancePush(<<>>, 0, 0, F1, _) ->
    #balancePush{balance = F1};
dfp_read_field_def_balancePush(Other, Z1, Z2, F1,
			       TrUserData) ->
    dg_read_field_def_balancePush(Other, Z1, Z2, F1,
				  TrUserData).

dg_read_field_def_balancePush(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_balancePush(Rest, N + 7,
				  X bsl N + Acc, F1, TrUserData);
dg_read_field_def_balancePush(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_balancePush_balance(Rest, 0, 0, F1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_balancePush(Rest, 0, 0, F1, TrUserData);
	    1 -> skip_64_balancePush(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_balancePush(Rest, 0, 0, F1,
						  TrUserData);
	    3 ->
		skip_group_balancePush(Rest, Key bsr 3, 0, F1,
				       TrUserData);
	    5 -> skip_32_balancePush(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_balancePush(<<>>, 0, 0, F1, _) ->
    #balancePush{balance = F1}.

d_field_balancePush_balance(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_balancePush_balance(Rest, N + 7, X bsl N + Acc,
				F1, TrUserData);
d_field_balancePush_balance(<<0:1, X:7, Rest/binary>>,
			    N, Acc, _, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_balancePush(Rest, 0, 0, NewFValue,
				   TrUserData).


skip_varint_balancePush(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F1, TrUserData) ->
    skip_varint_balancePush(Rest, Z1, Z2, F1, TrUserData);
skip_varint_balancePush(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F1, TrUserData) ->
    dfp_read_field_def_balancePush(Rest, Z1, Z2, F1,
				   TrUserData).


skip_length_delimited_balancePush(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_balancePush(Rest, N + 7,
				      X bsl N + Acc, F1, TrUserData);
skip_length_delimited_balancePush(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_balancePush(Rest2, 0, 0, F1,
				   TrUserData).


skip_group_balancePush(Bin, FNum, Z2, F1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_balancePush(Rest, 0, Z2, F1,
				   TrUserData).


skip_32_balancePush(<<_:32, Rest/binary>>, Z1, Z2, F1,
		    TrUserData) ->
    dfp_read_field_def_balancePush(Rest, Z1, Z2, F1,
				   TrUserData).


skip_64_balancePush(<<_:64, Rest/binary>>, Z1, Z2, F1,
		    TrUserData) ->
    dfp_read_field_def_balancePush(Rest, Z1, Z2, F1,
				   TrUserData).


d_msg_gmResp(Bin, TrUserData) ->
    dfp_read_field_def_gmResp(Bin, 0, 0, TrUserData).

dfp_read_field_def_gmResp(<<>>, 0, 0, _) -> #gmResp{};
dfp_read_field_def_gmResp(Other, Z1, Z2, TrUserData) ->
    dg_read_field_def_gmResp(Other, Z1, Z2, TrUserData).

dg_read_field_def_gmResp(<<1:1, X:7, Rest/binary>>, N,
			 Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_gmResp(Rest, N + 7, X bsl N + Acc,
			     TrUserData);
dg_read_field_def_gmResp(<<0:1, X:7, Rest/binary>>, N,
			 Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_gmResp(Rest, 0, 0, TrUserData);
      1 -> skip_64_gmResp(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_gmResp(Rest, 0, 0, TrUserData);
      3 -> skip_group_gmResp(Rest, Key bsr 3, 0, TrUserData);
      5 -> skip_32_gmResp(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_gmResp(<<>>, 0, 0, _) -> #gmResp{}.

skip_varint_gmResp(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		   TrUserData) ->
    skip_varint_gmResp(Rest, Z1, Z2, TrUserData);
skip_varint_gmResp(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		   TrUserData) ->
    dfp_read_field_def_gmResp(Rest, Z1, Z2, TrUserData).


skip_length_delimited_gmResp(<<1:1, X:7, Rest/binary>>,
			     N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_gmResp(Rest, N + 7, X bsl N + Acc,
				 TrUserData);
skip_length_delimited_gmResp(<<0:1, X:7, Rest/binary>>,
			     N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_gmResp(Rest2, 0, 0, TrUserData).


skip_group_gmResp(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_gmResp(Rest, 0, Z2, TrUserData).


skip_32_gmResp(<<_:32, Rest/binary>>, Z1, Z2,
	       TrUserData) ->
    dfp_read_field_def_gmResp(Rest, Z1, Z2, TrUserData).


skip_64_gmResp(<<_:64, Rest/binary>>, Z1, Z2,
	       TrUserData) ->
    dfp_read_field_def_gmResp(Rest, Z1, Z2, TrUserData).


d_msg_loginResp(Bin, TrUserData) ->
    dfp_read_field_def_loginResp(Bin, 0, 0,
				 id(undefined, TrUserData),
				 id(undefined, TrUserData),
				 id(undefined, TrUserData),
				 id(undefined, TrUserData), TrUserData).

dfp_read_field_def_loginResp(<<8, Rest/binary>>, Z1, Z2,
			     F1, F2, F3, F4, TrUserData) ->
    d_field_loginResp_game_id(Rest, Z1, Z2, F1, F2, F3, F4,
			      TrUserData);
dfp_read_field_def_loginResp(<<16, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, TrUserData) ->
    d_field_loginResp_balance(Rest, Z1, Z2, F1, F2, F3, F4,
			      TrUserData);
dfp_read_field_def_loginResp(<<24, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, TrUserData) ->
    d_field_loginResp_type(Rest, Z1, Z2, F1, F2, F3, F4,
			   TrUserData);
dfp_read_field_def_loginResp(<<32, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, TrUserData) ->
    d_field_loginResp_gm(Rest, Z1, Z2, F1, F2, F3, F4,
			 TrUserData);
dfp_read_field_def_loginResp(<<>>, 0, 0, F1, F2, F3, F4,
			     _) ->
    #loginResp{game_id = F1, balance = F2, type = F3,
	       gm = F4};
dfp_read_field_def_loginResp(Other, Z1, Z2, F1, F2, F3,
			     F4, TrUserData) ->
    dg_read_field_def_loginResp(Other, Z1, Z2, F1, F2, F3,
				F4, TrUserData).

dg_read_field_def_loginResp(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_loginResp(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, F4, TrUserData);
dg_read_field_def_loginResp(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_loginResp_game_id(Rest, 0, 0, F1, F2, F3, F4,
				    TrUserData);
      16 ->
	  d_field_loginResp_balance(Rest, 0, 0, F1, F2, F3, F4,
				    TrUserData);
      24 ->
	  d_field_loginResp_type(Rest, 0, 0, F1, F2, F3, F4,
				 TrUserData);
      32 ->
	  d_field_loginResp_gm(Rest, 0, 0, F1, F2, F3, F4,
			       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_loginResp(Rest, 0, 0, F1, F2, F3, F4,
				      TrUserData);
	    1 ->
		skip_64_loginResp(Rest, 0, 0, F1, F2, F3, F4,
				  TrUserData);
	    2 ->
		skip_length_delimited_loginResp(Rest, 0, 0, F1, F2, F3,
						F4, TrUserData);
	    3 ->
		skip_group_loginResp(Rest, Key bsr 3, 0, F1, F2, F3, F4,
				     TrUserData);
	    5 ->
		skip_32_loginResp(Rest, 0, 0, F1, F2, F3, F4,
				  TrUserData)
	  end
    end;
dg_read_field_def_loginResp(<<>>, 0, 0, F1, F2, F3, F4,
			    _) ->
    #loginResp{game_id = F1, balance = F2, type = F3,
	       gm = F4}.

d_field_loginResp_game_id(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    d_field_loginResp_game_id(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, F4, TrUserData);
d_field_loginResp_game_id(<<0:1, X:7, Rest/binary>>, N,
			  Acc, _, F2, F3, F4, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_loginResp(Rest, 0, 0, NewFValue, F2,
				 F3, F4, TrUserData).


d_field_loginResp_balance(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    d_field_loginResp_balance(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, F4, TrUserData);
d_field_loginResp_balance(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, _, F3, F4, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_loginResp(Rest, 0, 0, F1, NewFValue,
				 F3, F4, TrUserData).


d_field_loginResp_type(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    d_field_loginResp_type(Rest, N + 7, X bsl N + Acc, F1,
			   F2, F3, F4, TrUserData);
d_field_loginResp_type(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, _, F4, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_loginResp(Rest, 0, 0, F1, F2,
				 NewFValue, F4, TrUserData).


d_field_loginResp_gm(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    d_field_loginResp_gm(Rest, N + 7, X bsl N + Acc, F1, F2,
			 F3, F4, TrUserData);
d_field_loginResp_gm(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F1, F2, F3, _, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_loginResp(Rest, 0, 0, F1, F2, F3,
				 NewFValue, TrUserData).


skip_varint_loginResp(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F1, F2, F3, F4, TrUserData) ->
    skip_varint_loginResp(Rest, Z1, Z2, F1, F2, F3, F4,
			  TrUserData);
skip_varint_loginResp(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F1, F2, F3, F4, TrUserData) ->
    dfp_read_field_def_loginResp(Rest, Z1, Z2, F1, F2, F3,
				 F4, TrUserData).


skip_length_delimited_loginResp(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    skip_length_delimited_loginResp(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, TrUserData);
skip_length_delimited_loginResp(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_loginResp(Rest2, 0, 0, F1, F2, F3,
				 F4, TrUserData).


skip_group_loginResp(Bin, FNum, Z2, F1, F2, F3, F4,
		     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_loginResp(Rest, 0, Z2, F1, F2, F3,
				 F4, TrUserData).


skip_32_loginResp(<<_:32, Rest/binary>>, Z1, Z2, F1, F2,
		  F3, F4, TrUserData) ->
    dfp_read_field_def_loginResp(Rest, Z1, Z2, F1, F2, F3,
				 F4, TrUserData).


skip_64_loginResp(<<_:64, Rest/binary>>, Z1, Z2, F1, F2,
		  F3, F4, TrUserData) ->
    dfp_read_field_def_loginResp(Rest, Z1, Z2, F1, F2, F3,
				 F4, TrUserData).


d_msg_beatHeartResp(Bin, TrUserData) ->
    dfp_read_field_def_beatHeartResp(Bin, 0, 0, TrUserData).

dfp_read_field_def_beatHeartResp(<<>>, 0, 0, _) ->
    #beatHeartResp{};
dfp_read_field_def_beatHeartResp(Other, Z1, Z2,
				 TrUserData) ->
    dg_read_field_def_beatHeartResp(Other, Z1, Z2,
				    TrUserData).

dg_read_field_def_beatHeartResp(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_beatHeartResp(Rest, N + 7,
				    X bsl N + Acc, TrUserData);
dg_read_field_def_beatHeartResp(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_beatHeartResp(Rest, 0, 0, TrUserData);
      1 -> skip_64_beatHeartResp(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_beatHeartResp(Rest, 0, 0,
					      TrUserData);
      3 ->
	  skip_group_beatHeartResp(Rest, Key bsr 3, 0,
				   TrUserData);
      5 -> skip_32_beatHeartResp(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_beatHeartResp(<<>>, 0, 0, _) ->
    #beatHeartResp{}.

skip_varint_beatHeartResp(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, TrUserData) ->
    skip_varint_beatHeartResp(Rest, Z1, Z2, TrUserData);
skip_varint_beatHeartResp(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, TrUserData) ->
    dfp_read_field_def_beatHeartResp(Rest, Z1, Z2,
				     TrUserData).


skip_length_delimited_beatHeartResp(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_beatHeartResp(Rest, N + 7,
					X bsl N + Acc, TrUserData);
skip_length_delimited_beatHeartResp(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_beatHeartResp(Rest2, 0, 0,
				     TrUserData).


skip_group_beatHeartResp(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_beatHeartResp(Rest, 0, Z2,
				     TrUserData).


skip_32_beatHeartResp(<<_:32, Rest/binary>>, Z1, Z2,
		      TrUserData) ->
    dfp_read_field_def_beatHeartResp(Rest, Z1, Z2,
				     TrUserData).


skip_64_beatHeartResp(<<_:64, Rest/binary>>, Z1, Z2,
		      TrUserData) ->
    dfp_read_field_def_beatHeartResp(Rest, Z1, Z2,
				     TrUserData).


d_msg_gmReq(Bin, TrUserData) ->
    dfp_read_field_def_gmReq(Bin, 0, 0,
			     id(undefined, TrUserData), TrUserData).

dfp_read_field_def_gmReq(<<10, Rest/binary>>, Z1, Z2,
			 F1, TrUserData) ->
    d_field_gmReq_gm_str(Rest, Z1, Z2, F1, TrUserData);
dfp_read_field_def_gmReq(<<>>, 0, 0, F1, _) ->
    #gmReq{gm_str = F1};
dfp_read_field_def_gmReq(Other, Z1, Z2, F1,
			 TrUserData) ->
    dg_read_field_def_gmReq(Other, Z1, Z2, F1, TrUserData).

dg_read_field_def_gmReq(<<1:1, X:7, Rest/binary>>, N,
			Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_gmReq(Rest, N + 7, X bsl N + Acc, F1,
			    TrUserData);
dg_read_field_def_gmReq(<<0:1, X:7, Rest/binary>>, N,
			Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_gmReq_gm_str(Rest, 0, 0, F1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_gmReq(Rest, 0, 0, F1, TrUserData);
	    1 -> skip_64_gmReq(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_gmReq(Rest, 0, 0, F1, TrUserData);
	    3 ->
		skip_group_gmReq(Rest, Key bsr 3, 0, F1, TrUserData);
	    5 -> skip_32_gmReq(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_gmReq(<<>>, 0, 0, F1, _) ->
    #gmReq{gm_str = F1}.

d_field_gmReq_gm_str(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F1, TrUserData)
    when N < 57 ->
    d_field_gmReq_gm_str(Rest, N + 7, X bsl N + Acc, F1,
			 TrUserData);
d_field_gmReq_gm_str(<<0:1, X:7, Rest/binary>>, N, Acc,
		     _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_gmReq(Rest2, 0, 0, NewFValue,
			     TrUserData).


skip_varint_gmReq(<<1:1, _:7, Rest/binary>>, Z1, Z2, F1,
		  TrUserData) ->
    skip_varint_gmReq(Rest, Z1, Z2, F1, TrUserData);
skip_varint_gmReq(<<0:1, _:7, Rest/binary>>, Z1, Z2, F1,
		  TrUserData) ->
    dfp_read_field_def_gmReq(Rest, Z1, Z2, F1, TrUserData).


skip_length_delimited_gmReq(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_gmReq(Rest, N + 7, X bsl N + Acc,
				F1, TrUserData);
skip_length_delimited_gmReq(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_gmReq(Rest2, 0, 0, F1, TrUserData).


skip_group_gmReq(Bin, FNum, Z2, F1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_gmReq(Rest, 0, Z2, F1, TrUserData).


skip_32_gmReq(<<_:32, Rest/binary>>, Z1, Z2, F1,
	      TrUserData) ->
    dfp_read_field_def_gmReq(Rest, Z1, Z2, F1, TrUserData).


skip_64_gmReq(<<_:64, Rest/binary>>, Z1, Z2, F1,
	      TrUserData) ->
    dfp_read_field_def_gmReq(Rest, Z1, Z2, F1, TrUserData).


d_msg_beatHeartReq(Bin, TrUserData) ->
    dfp_read_field_def_beatHeartReq(Bin, 0, 0, TrUserData).

dfp_read_field_def_beatHeartReq(<<>>, 0, 0, _) ->
    #beatHeartReq{};
dfp_read_field_def_beatHeartReq(Other, Z1, Z2,
				TrUserData) ->
    dg_read_field_def_beatHeartReq(Other, Z1, Z2,
				   TrUserData).

dg_read_field_def_beatHeartReq(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_beatHeartReq(Rest, N + 7,
				   X bsl N + Acc, TrUserData);
dg_read_field_def_beatHeartReq(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_beatHeartReq(Rest, 0, 0, TrUserData);
      1 -> skip_64_beatHeartReq(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_beatHeartReq(Rest, 0, 0,
					     TrUserData);
      3 ->
	  skip_group_beatHeartReq(Rest, Key bsr 3, 0, TrUserData);
      5 -> skip_32_beatHeartReq(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_beatHeartReq(<<>>, 0, 0, _) ->
    #beatHeartReq{}.

skip_varint_beatHeartReq(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, TrUserData) ->
    skip_varint_beatHeartReq(Rest, Z1, Z2, TrUserData);
skip_varint_beatHeartReq(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, TrUserData) ->
    dfp_read_field_def_beatHeartReq(Rest, Z1, Z2,
				    TrUserData).


skip_length_delimited_beatHeartReq(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_beatHeartReq(Rest, N + 7,
				       X bsl N + Acc, TrUserData);
skip_length_delimited_beatHeartReq(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_beatHeartReq(Rest2, 0, 0,
				    TrUserData).


skip_group_beatHeartReq(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_beatHeartReq(Rest, 0, Z2,
				    TrUserData).


skip_32_beatHeartReq(<<_:32, Rest/binary>>, Z1, Z2,
		     TrUserData) ->
    dfp_read_field_def_beatHeartReq(Rest, Z1, Z2,
				    TrUserData).


skip_64_beatHeartReq(<<_:64, Rest/binary>>, Z1, Z2,
		     TrUserData) ->
    dfp_read_field_def_beatHeartReq(Rest, Z1, Z2,
				    TrUserData).


d_msg_getBalanceReq(Bin, TrUserData) ->
    dfp_read_field_def_getBalanceReq(Bin, 0, 0, TrUserData).

dfp_read_field_def_getBalanceReq(<<>>, 0, 0, _) ->
    #getBalanceReq{};
dfp_read_field_def_getBalanceReq(Other, Z1, Z2,
				 TrUserData) ->
    dg_read_field_def_getBalanceReq(Other, Z1, Z2,
				    TrUserData).

dg_read_field_def_getBalanceReq(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_getBalanceReq(Rest, N + 7,
				    X bsl N + Acc, TrUserData);
dg_read_field_def_getBalanceReq(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_getBalanceReq(Rest, 0, 0, TrUserData);
      1 -> skip_64_getBalanceReq(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_getBalanceReq(Rest, 0, 0,
					      TrUserData);
      3 ->
	  skip_group_getBalanceReq(Rest, Key bsr 3, 0,
				   TrUserData);
      5 -> skip_32_getBalanceReq(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_getBalanceReq(<<>>, 0, 0, _) ->
    #getBalanceReq{}.

skip_varint_getBalanceReq(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, TrUserData) ->
    skip_varint_getBalanceReq(Rest, Z1, Z2, TrUserData);
skip_varint_getBalanceReq(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, TrUserData) ->
    dfp_read_field_def_getBalanceReq(Rest, Z1, Z2,
				     TrUserData).


skip_length_delimited_getBalanceReq(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_getBalanceReq(Rest, N + 7,
					X bsl N + Acc, TrUserData);
skip_length_delimited_getBalanceReq(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_getBalanceReq(Rest2, 0, 0,
				     TrUserData).


skip_group_getBalanceReq(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_getBalanceReq(Rest, 0, Z2,
				     TrUserData).


skip_32_getBalanceReq(<<_:32, Rest/binary>>, Z1, Z2,
		      TrUserData) ->
    dfp_read_field_def_getBalanceReq(Rest, Z1, Z2,
				     TrUserData).


skip_64_getBalanceReq(<<_:64, Rest/binary>>, Z1, Z2,
		      TrUserData) ->
    dfp_read_field_def_getBalanceReq(Rest, Z1, Z2,
				     TrUserData).


d_msg_getBalanceResp(Bin, TrUserData) ->
    dfp_read_field_def_getBalanceResp(Bin, 0, 0,
				      id(undefined, TrUserData), TrUserData).

dfp_read_field_def_getBalanceResp(<<8, Rest/binary>>,
				  Z1, Z2, F1, TrUserData) ->
    d_field_getBalanceResp_balance(Rest, Z1, Z2, F1,
				   TrUserData);
dfp_read_field_def_getBalanceResp(<<>>, 0, 0, F1, _) ->
    #getBalanceResp{balance = F1};
dfp_read_field_def_getBalanceResp(Other, Z1, Z2, F1,
				  TrUserData) ->
    dg_read_field_def_getBalanceResp(Other, Z1, Z2, F1,
				     TrUserData).

dg_read_field_def_getBalanceResp(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_getBalanceResp(Rest, N + 7,
				     X bsl N + Acc, F1, TrUserData);
dg_read_field_def_getBalanceResp(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_getBalanceResp_balance(Rest, 0, 0, F1,
					 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_getBalanceResp(Rest, 0, 0, F1, TrUserData);
	    1 -> skip_64_getBalanceResp(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_getBalanceResp(Rest, 0, 0, F1,
						     TrUserData);
	    3 ->
		skip_group_getBalanceResp(Rest, Key bsr 3, 0, F1,
					  TrUserData);
	    5 -> skip_32_getBalanceResp(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_getBalanceResp(<<>>, 0, 0, F1, _) ->
    #getBalanceResp{balance = F1}.

d_field_getBalanceResp_balance(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_getBalanceResp_balance(Rest, N + 7,
				   X bsl N + Acc, F1, TrUserData);
d_field_getBalanceResp_balance(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, _, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_getBalanceResp(Rest, 0, 0, NewFValue,
				      TrUserData).


skip_varint_getBalanceResp(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, TrUserData) ->
    skip_varint_getBalanceResp(Rest, Z1, Z2, F1,
			       TrUserData);
skip_varint_getBalanceResp(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_getBalanceResp(Rest, Z1, Z2, F1,
				      TrUserData).


skip_length_delimited_getBalanceResp(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_getBalanceResp(Rest, N + 7,
					 X bsl N + Acc, F1, TrUserData);
skip_length_delimited_getBalanceResp(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_getBalanceResp(Rest2, 0, 0, F1,
				      TrUserData).


skip_group_getBalanceResp(Bin, FNum, Z2, F1,
			  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_getBalanceResp(Rest, 0, Z2, F1,
				      TrUserData).


skip_32_getBalanceResp(<<_:32, Rest/binary>>, Z1, Z2,
		       F1, TrUserData) ->
    dfp_read_field_def_getBalanceResp(Rest, Z1, Z2, F1,
				      TrUserData).


skip_64_getBalanceResp(<<_:64, Rest/binary>>, Z1, Z2,
		       F1, TrUserData) ->
    dfp_read_field_def_getBalanceResp(Rest, Z1, Z2, F1,
				      TrUserData).


d_msg_loginReq(Bin, TrUserData) ->
    dfp_read_field_def_loginReq(Bin, 0, 0,
				id(undefined, TrUserData),
				id(undefined, TrUserData), TrUserData).

dfp_read_field_def_loginReq(<<10, Rest/binary>>, Z1, Z2,
			    F1, F2, TrUserData) ->
    d_field_loginReq_token(Rest, Z1, Z2, F1, F2,
			   TrUserData);
dfp_read_field_def_loginReq(<<16, Rest/binary>>, Z1, Z2,
			    F1, F2, TrUserData) ->
    d_field_loginReq_game_id(Rest, Z1, Z2, F1, F2,
			     TrUserData);
dfp_read_field_def_loginReq(<<>>, 0, 0, F1, F2, _) ->
    #loginReq{token = F1, game_id = F2};
dfp_read_field_def_loginReq(Other, Z1, Z2, F1, F2,
			    TrUserData) ->
    dg_read_field_def_loginReq(Other, Z1, Z2, F1, F2,
			       TrUserData).

dg_read_field_def_loginReq(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_loginReq(Rest, N + 7, X bsl N + Acc,
			       F1, F2, TrUserData);
dg_read_field_def_loginReq(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_loginReq_token(Rest, 0, 0, F1, F2, TrUserData);
      16 ->
	  d_field_loginReq_game_id(Rest, 0, 0, F1, F2,
				   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_loginReq(Rest, 0, 0, F1, F2, TrUserData);
	    1 -> skip_64_loginReq(Rest, 0, 0, F1, F2, TrUserData);
	    2 ->
		skip_length_delimited_loginReq(Rest, 0, 0, F1, F2,
					       TrUserData);
	    3 ->
		skip_group_loginReq(Rest, Key bsr 3, 0, F1, F2,
				    TrUserData);
	    5 -> skip_32_loginReq(Rest, 0, 0, F1, F2, TrUserData)
	  end
    end;
dg_read_field_def_loginReq(<<>>, 0, 0, F1, F2, _) ->
    #loginReq{token = F1, game_id = F2}.

d_field_loginReq_token(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_loginReq_token(Rest, N + 7, X bsl N + Acc, F1,
			   F2, TrUserData);
d_field_loginReq_token(<<0:1, X:7, Rest/binary>>, N,
		       Acc, _, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_loginReq(Rest2, 0, 0, NewFValue, F2,
				TrUserData).


d_field_loginReq_game_id(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_loginReq_game_id(Rest, N + 7, X bsl N + Acc, F1,
			     F2, TrUserData);
d_field_loginReq_game_id(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F1, _, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_loginReq(Rest, 0, 0, F1, NewFValue,
				TrUserData).


skip_varint_loginReq(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F1, F2, TrUserData) ->
    skip_varint_loginReq(Rest, Z1, Z2, F1, F2, TrUserData);
skip_varint_loginReq(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F1, F2, TrUserData) ->
    dfp_read_field_def_loginReq(Rest, Z1, Z2, F1, F2,
				TrUserData).


skip_length_delimited_loginReq(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_loginReq(Rest, N + 7,
				   X bsl N + Acc, F1, F2, TrUserData);
skip_length_delimited_loginReq(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_loginReq(Rest2, 0, 0, F1, F2,
				TrUserData).


skip_group_loginReq(Bin, FNum, Z2, F1, F2,
		    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_loginReq(Rest, 0, Z2, F1, F2,
				TrUserData).


skip_32_loginReq(<<_:32, Rest/binary>>, Z1, Z2, F1, F2,
		 TrUserData) ->
    dfp_read_field_def_loginReq(Rest, Z1, Z2, F1, F2,
				TrUserData).


skip_64_loginReq(<<_:64, Rest/binary>>, Z1, Z2, F1, F2,
		 TrUserData) ->
    dfp_read_field_def_loginReq(Rest, Z1, Z2, F1, F2,
				TrUserData).




read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).


merge_msgs(Prev, New) -> merge_msgs(Prev, New, []).

merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Prev of
      #errResp{} -> merge_msg_errResp(Prev, New, TrUserData);
      #kickUserPush{} ->
	  merge_msg_kickUserPush(Prev, New, TrUserData);
      #balancePush{} ->
	  merge_msg_balancePush(Prev, New, TrUserData);
      #gmResp{} -> merge_msg_gmResp(Prev, New, TrUserData);
      #loginResp{} ->
	  merge_msg_loginResp(Prev, New, TrUserData);
      #beatHeartResp{} ->
	  merge_msg_beatHeartResp(Prev, New, TrUserData);
      #gmReq{} -> merge_msg_gmReq(Prev, New, TrUserData);
      #beatHeartReq{} ->
	  merge_msg_beatHeartReq(Prev, New, TrUserData);
      #getBalanceReq{} ->
	  merge_msg_getBalanceReq(Prev, New, TrUserData);
      #getBalanceResp{} ->
	  merge_msg_getBalanceResp(Prev, New, TrUserData);
      #loginReq{} -> merge_msg_loginReq(Prev, New, TrUserData)
    end.

merge_msg_errResp(#errResp{err_code = PFerr_code,
			   err_msg = PFerr_msg},
		  #errResp{cmd = NFcmd, err_code = NFerr_code,
			   err_msg = NFerr_msg},
		  _) ->
    #errResp{cmd = NFcmd,
	     err_code =
		 if NFerr_code =:= undefined -> PFerr_code;
		    true -> NFerr_code
		 end,
	     err_msg =
		 if NFerr_msg =:= undefined -> PFerr_msg;
		    true -> NFerr_msg
		 end}.

merge_msg_kickUserPush(#kickUserPush{},
		       #kickUserPush{code = NFcode}, _) ->
    #kickUserPush{code = NFcode}.

merge_msg_balancePush(#balancePush{},
		      #balancePush{balance = NFbalance}, _) ->
    #balancePush{balance = NFbalance}.

merge_msg_gmResp(_Prev, New, _TrUserData) -> New.

merge_msg_loginResp(#loginResp{},
		    #loginResp{game_id = NFgame_id, balance = NFbalance,
			       type = NFtype, gm = NFgm},
		    _) ->
    #loginResp{game_id = NFgame_id, balance = NFbalance,
	       type = NFtype, gm = NFgm}.

merge_msg_beatHeartResp(_Prev, New, _TrUserData) -> New.

merge_msg_gmReq(#gmReq{}, #gmReq{gm_str = NFgm_str},
		_) ->
    #gmReq{gm_str = NFgm_str}.

merge_msg_beatHeartReq(_Prev, New, _TrUserData) -> New.

merge_msg_getBalanceReq(_Prev, New, _TrUserData) -> New.

merge_msg_getBalanceResp(#getBalanceResp{},
			 #getBalanceResp{balance = NFbalance}, _) ->
    #getBalanceResp{balance = NFbalance}.

merge_msg_loginReq(#loginReq{game_id = PFgame_id},
		   #loginReq{token = NFtoken, game_id = NFgame_id}, _) ->
    #loginReq{token = NFtoken,
	      game_id =
		  if NFgame_id =:= undefined -> PFgame_id;
		     true -> NFgame_id
		  end}.



verify_msg(Msg) -> verify_msg(Msg, []).

verify_msg(Msg, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #errResp{} -> v_msg_errResp(Msg, [errResp], TrUserData);
      #kickUserPush{} ->
	  v_msg_kickUserPush(Msg, [kickUserPush], TrUserData);
      #balancePush{} ->
	  v_msg_balancePush(Msg, [balancePush], TrUserData);
      #gmResp{} -> v_msg_gmResp(Msg, [gmResp], TrUserData);
      #loginResp{} ->
	  v_msg_loginResp(Msg, [loginResp], TrUserData);
      #beatHeartResp{} ->
	  v_msg_beatHeartResp(Msg, [beatHeartResp], TrUserData);
      #gmReq{} -> v_msg_gmReq(Msg, [gmReq], TrUserData);
      #beatHeartReq{} ->
	  v_msg_beatHeartReq(Msg, [beatHeartReq], TrUserData);
      #getBalanceReq{} ->
	  v_msg_getBalanceReq(Msg, [getBalanceReq], TrUserData);
      #getBalanceResp{} ->
	  v_msg_getBalanceResp(Msg, [getBalanceResp], TrUserData);
      #loginReq{} ->
	  v_msg_loginReq(Msg, [loginReq], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-dialyzer({nowarn_function,v_msg_errResp/3}).
v_msg_errResp(#errResp{cmd = F1, err_code = F2,
		       err_msg = F3},
	      Path, _) ->
    v_type_uint32(F1, [cmd | Path]),
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [err_code | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [err_msg | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_kickUserPush/3}).
v_msg_kickUserPush(#kickUserPush{code = F1}, Path, _) ->
    v_type_uint32(F1, [code | Path]), ok.

-dialyzer({nowarn_function,v_msg_balancePush/3}).
v_msg_balancePush(#balancePush{balance = F1}, Path,
		  _) ->
    v_type_uint32(F1, [balance | Path]), ok.

-dialyzer({nowarn_function,v_msg_gmResp/3}).
v_msg_gmResp(#gmResp{}, _Path, _) -> ok.

-dialyzer({nowarn_function,v_msg_loginResp/3}).
v_msg_loginResp(#loginResp{game_id = F1, balance = F2,
			   type = F3, gm = F4},
		Path, _) ->
    v_type_uint32(F1, [game_id | Path]),
    v_type_uint64(F2, [balance | Path]),
    v_type_uint32(F3, [type | Path]),
    v_type_uint32(F4, [gm | Path]),
    ok.

-dialyzer({nowarn_function,v_msg_beatHeartResp/3}).
v_msg_beatHeartResp(#beatHeartResp{}, _Path, _) -> ok.

-dialyzer({nowarn_function,v_msg_gmReq/3}).
v_msg_gmReq(#gmReq{gm_str = F1}, Path, _) ->
    v_type_string(F1, [gm_str | Path]), ok.

-dialyzer({nowarn_function,v_msg_beatHeartReq/3}).
v_msg_beatHeartReq(#beatHeartReq{}, _Path, _) -> ok.

-dialyzer({nowarn_function,v_msg_getBalanceReq/3}).
v_msg_getBalanceReq(#getBalanceReq{}, _Path, _) -> ok.

-dialyzer({nowarn_function,v_msg_getBalanceResp/3}).
v_msg_getBalanceResp(#getBalanceResp{balance = F1},
		     Path, _) ->
    v_type_uint32(F1, [balance | Path]), ok.

-dialyzer({nowarn_function,v_msg_loginReq/3}).
v_msg_loginReq(#loginReq{token = F1, game_id = F2},
	       Path, _) ->
    v_type_string(F1, [token | Path]),
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [game_id | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_type_uint32/2}).
v_type_uint32(N, _Path) when 0 =< N, N =< 4294967295 ->
    ok;
v_type_uint32(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, uint32, unsigned,
		   32},
		  N, Path);
v_type_uint32(X, Path) ->
    mk_type_error({bad_integer, uint32, unsigned, 32}, X,
		  Path).

-dialyzer({nowarn_function,v_type_uint64/2}).
v_type_uint64(N, _Path)
    when 0 =< N, N =< 18446744073709551615 ->
    ok;
v_type_uint64(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, uint64, unsigned,
		   64},
		  N, Path);
v_type_uint64(X, Path) ->
    mk_type_error({bad_integer, uint64, unsigned, 64}, X,
		  Path).

-dialyzer({nowarn_function,v_type_string/2}).
v_type_string(S, Path) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path) ->
    mk_type_error(bad_unicode_string, X, Path).

-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(string:join(lists:map(fun atom_to_list/1,
				       lists:reverse(PathR)),
			     ".")).



-compile({inline,id/2}).
id(X, _TrUserData) -> X.




get_msg_defs() ->
    [{{msg, errResp},
      [#field{name = cmd, fnum = 1, rnum = 2, type = uint32,
	      occurrence = required, opts = []},
       #field{name = err_code, fnum = 2, rnum = 3,
	      type = uint32, occurrence = optional, opts = []},
       #field{name = err_msg, fnum = 3, rnum = 4,
	      type = string, occurrence = optional, opts = []}]},
     {{msg, kickUserPush},
      [#field{name = code, fnum = 1, rnum = 2, type = uint32,
	      occurrence = required, opts = []}]},
     {{msg, balancePush},
      [#field{name = balance, fnum = 1, rnum = 2,
	      type = uint32, occurrence = required, opts = []}]},
     {{msg, gmResp}, []},
     {{msg, loginResp},
      [#field{name = game_id, fnum = 1, rnum = 2,
	      type = uint32, occurrence = required, opts = []},
       #field{name = balance, fnum = 2, rnum = 3,
	      type = uint64, occurrence = required, opts = []},
       #field{name = type, fnum = 3, rnum = 4, type = uint32,
	      occurrence = required, opts = []},
       #field{name = gm, fnum = 4, rnum = 5, type = uint32,
	      occurrence = required, opts = []}]},
     {{msg, beatHeartResp}, []},
     {{msg, gmReq},
      [#field{name = gm_str, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []}]},
     {{msg, beatHeartReq}, []}, {{msg, getBalanceReq}, []},
     {{msg, getBalanceResp},
      [#field{name = balance, fnum = 1, rnum = 2,
	      type = uint32, occurrence = required, opts = []}]},
     {{msg, loginReq},
      [#field{name = token, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = game_id, fnum = 2, rnum = 3,
	      type = uint32, occurrence = optional, opts = []}]}].


get_msg_names() ->
    [errResp, kickUserPush, balancePush, gmResp, loginResp,
     beatHeartResp, gmReq, beatHeartReq, getBalanceReq,
     getBalanceResp, loginReq].


get_group_names() -> [].


get_msg_or_group_names() ->
    [errResp, kickUserPush, balancePush, gmResp, loginResp,
     beatHeartResp, gmReq, beatHeartReq, getBalanceReq,
     getBalanceResp, loginReq].


get_enum_names() -> [].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


-spec fetch_enum_def(_) -> no_return().
fetch_enum_def(EnumName) ->
    erlang:error({no_such_enum, EnumName}).


find_msg_def(errResp) ->
    [#field{name = cmd, fnum = 1, rnum = 2, type = uint32,
	    occurrence = required, opts = []},
     #field{name = err_code, fnum = 2, rnum = 3,
	    type = uint32, occurrence = optional, opts = []},
     #field{name = err_msg, fnum = 3, rnum = 4,
	    type = string, occurrence = optional, opts = []}];
find_msg_def(kickUserPush) ->
    [#field{name = code, fnum = 1, rnum = 2, type = uint32,
	    occurrence = required, opts = []}];
find_msg_def(balancePush) ->
    [#field{name = balance, fnum = 1, rnum = 2,
	    type = uint32, occurrence = required, opts = []}];
find_msg_def(gmResp) -> [];
find_msg_def(loginResp) ->
    [#field{name = game_id, fnum = 1, rnum = 2,
	    type = uint32, occurrence = required, opts = []},
     #field{name = balance, fnum = 2, rnum = 3,
	    type = uint64, occurrence = required, opts = []},
     #field{name = type, fnum = 3, rnum = 4, type = uint32,
	    occurrence = required, opts = []},
     #field{name = gm, fnum = 4, rnum = 5, type = uint32,
	    occurrence = required, opts = []}];
find_msg_def(beatHeartResp) -> [];
find_msg_def(gmReq) ->
    [#field{name = gm_str, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []}];
find_msg_def(beatHeartReq) -> [];
find_msg_def(getBalanceReq) -> [];
find_msg_def(getBalanceResp) ->
    [#field{name = balance, fnum = 1, rnum = 2,
	    type = uint32, occurrence = required, opts = []}];
find_msg_def(loginReq) ->
    [#field{name = token, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = game_id, fnum = 2, rnum = 3,
	    type = uint32, occurrence = optional, opts = []}];
find_msg_def(_) -> error.


find_enum_def(_) -> error.


-spec enum_symbol_by_value(_, _) -> no_return().
enum_symbol_by_value(E, V) ->
    erlang:error({no_enum_defs, E, V}).


-spec enum_value_by_symbol(_, _) -> no_return().
enum_value_by_symbol(E, V) ->
    erlang:error({no_enum_defs, E, V}).



get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


get_package_name() -> undefined.



gpb_version_as_string() ->
    "3.27.2".

gpb_version_as_list() ->
    [3,27,2].
